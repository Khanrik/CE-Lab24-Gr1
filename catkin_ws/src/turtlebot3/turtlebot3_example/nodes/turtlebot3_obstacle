#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

LINEAR_VEL = 0.21 #MAX = 0.21, MAX ANG.Z=2.6
LINEAR_PERCENT = LINEAR_VEL/100
ANGULAR_VEL = 2.6
ANGULAR_PERCENT = ANGULAR_VEL/100
STOP_DISTANCE = 0.10
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
FULL_SEND_DISTANCE = SAFE_STOP_DISTANCE * 5

LEFT = 0
RIGHT = 1

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    def turn(self, direction, distance):
        linear_skew = abs((distance - FULL_SEND_DISTANCE) / (FULL_SEND_DISTANCE))
        angular_skew = 100 - linear_skew

        if direction == LEFT:
            return linear_skew * LINEAR_PERCENT, angular_skew * ANGULAR_PERCENT
        elif direction == RIGHT:
            return linear_skew * LINEAR_PERCENT, -angular_skew * ANGULAR_PERCENT
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
        
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 90           # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_left = min(lidar_distances[:45])
            min_right = min(lidar_distances[45:])
            min_distance = min(lidar_distances)
            print(len(lidar_distances))
            print(lidar_distances)

            if min_distance < SAFE_STOP_DISTANCE:
                twist.linear.x = 0.0
                twist.angular.z = 0.0 #ANGULAR_VEL
                self._cmd_pub.publish(twist)
                rospy.loginfo('Too close! %f', min_distance)
            elif min_distance > FULL_SEND_DISTANCE:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)
            elif min_left <= min_right:
                twist.linear.x, twist.angular.z = self.turn(LEFT, min_left)
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Turn left!')
            elif min_right <= min_left:
                twist.linear.x, twist.angular.z = self.turn(RIGHT, min_right)
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Turn right!')


def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
