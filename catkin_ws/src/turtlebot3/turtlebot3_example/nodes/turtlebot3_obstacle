#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import time
from readFromRGB import *

LINEAR_VEL = -0.15 #MAX = 0.21, MAX ANG.Z=2.6
LINEAR_PERCENT = LINEAR_VEL/100
ANGULAR_VEL = 2.6
ANGULAR_PERCENT = ANGULAR_VEL/100
STOP_DISTANCE = 0.10
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR    # 15 cm
FULL_SEND_DISTANCE = SAFE_STOP_DISTANCE * 4         # 60 cm
VISION = 360 # vision in degrees
RUNTIME = 60 # runtime in seconds

LEFT = 1
RIGHT = -1

class Obstacle():
    def __init__(self):
        self.samples_view = 0
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
        
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        self.samples_view = VISION  # 1 <= samples_view <= samples
        if self.samples_view > samples:
            self.samples_view = samples

        if self.samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(self.samples_view//2 + self.samples_view % 2)
            right_lidar_samples_ranges = self.samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(self.samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter
    
    def deg(self, deg):
        return np.round(deg * (float(self.samples_view) / float(VISION)), 0).astype(int)

    def obstacle(self):
        twist = Twist()
        start = time.time()
        end = start + RUNTIME
        victim_offtime = 0
        collision_offtime = 0
        speed_updates = 0
        speed_accumulation = 0
        collision_counter = 0
        victim_counter = 0

        while not rospy.is_shutdown() and time.time() < end:
            distances = self.get_scan()
            front = np.mean(distances[self.deg(340):] + distances[:self.deg(20)])
            left_front = np.mean(distances[:self.deg(20)])
            right_front = np.mean(distances[self.deg(340):])

            # print("front mean: ", front)
            # print("back mean: ", np.mean(distances[self.deg(160):self.deg(200)]))
            # print("left mean: ", np.mean(distances[self.deg(250):self.deg(290)]))
            # print("right mean: ", np.mean(distances[self.deg(70):self.deg(110)]))

            for tal in range(0,350,10):
                if np.mean(distances[tal : tal + 20]) < STOP_DISTANCE and collision_offtime <= time.time():
                    collision_offtime = time.time() + 5
                    collision_counter += 1
                    rospy.loginfo('Collision detected')
                
            if front < SAFE_STOP_DISTANCE:
                twist.linear.x = -LINEAR_VEL / 4
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                rospy.loginfo('very close')
            elif np.mean(distances[self.deg(160):self.deg(200)]) < SAFE_STOP_DISTANCE:
                twist.linear.x = LINEAR_VEL / 4
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                rospy.loginfo('very close')
            elif np.mean(distances[self.deg(70):self.deg(110)]) < SAFE_STOP_DISTANCE:
                twist.linear.x = 0.0
                twist.angular.z = RIGHT * ANGULAR_VEL / 4
                self._cmd_pub.publish(twist)
                rospy.loginfo('very close')
            elif np.mean(distances[self.deg(250):self.deg(290)]) < SAFE_STOP_DISTANCE:
                twist.linear.x = 0.0
                twist.angular.z = LEFT * ANGULAR_VEL / 4
                self._cmd_pub.publish(twist)
                rospy.loginfo('very close')
            
            # FRONT CLOSE AHEAD
            elif np.mean(distances[self.deg(330):] + distances[:self.deg(30)]) < FULL_SEND_DISTANCE * 0.6:
                if np.mean(distances[:self.deg(30)]) < np.mean(distances[self.deg(330):]):
                    twist.linear.x = 70 * LINEAR_PERCENT
                    twist.angular.z = RIGHT * 30 * ANGULAR_PERCENT
                else:
                    twist.linear.x = 70 * LINEAR_PERCENT
                    twist.angular.z = LEFT * 30 * ANGULAR_PERCENT
                self._cmd_pub.publish(twist)
                rospy.loginfo('Object close ahead, turning')
                
            # FRONT BLOCKED MEDIUM AHEAD
            elif front < FULL_SEND_DISTANCE * 0.8:
                if left_front < right_front:
                    twist.linear.x = 80 * LINEAR_PERCENT
                    twist.angular.z = RIGHT * 20 * ANGULAR_PERCENT
                else:
                    twist.linear.x = 80 * LINEAR_PERCENT
                    twist.angular.z = LEFT * 20 * ANGULAR_PERCENT
                self._cmd_pub.publish(twist)
                rospy.loginfo('Object medium ahead, turning')
            
            # FRONT BLOCKED FAR AHEAD
            elif front < FULL_SEND_DISTANCE:
                if left_front < np.mean(distances[self.deg(180):self.deg(200)]):
                    twist.linear.x = 90 * LINEAR_PERCENT
                    twist.angular.z = RIGHT * 10 * ANGULAR_PERCENT
                else:
                    twist.linear.x = 90 * LINEAR_PERCENT
                    twist.angular.z = LEFT * 10 * ANGULAR_PERCENT
                self._cmd_pub.publish(twist)
                rospy.loginfo('Object far ahead, turning')
                
            else:
                # twist.linear.x = 0
                # twist.angular.z = 0
                # self._cmd_pub.publish(twist)
                # rospy.loginfo('Nothing going on here mister')
                twist.linear.x, twist.angular.z = LINEAR_VEL, 0.0
                self._cmd_pub.publish(twist)
                rospy.loginfo('GO!')
            
            if detectVictim():
                LEDon()
                if victim_offtime <= time.time():
                    victim_offtime = time.time() + 3
                    victim_counter += 1
                    rospy.loginfo('Victim detected!')

            if time.time() > victim_offtime:
                LEDoff()

            speed_accumulation += twist.linear.x
            speed_updates += 1
        
        LEDoff()
        twist.linear.x, twist.angular.z = 0, 0
        self._cmd_pub.publish(twist)
        avg_speed = speed_accumulation / speed_updates
        rospy.loginfo('Average speed = %f, collision counter = %d, victim counter = %d', avg_speed, collision_counter, victim_counter)
        rospy.loginfo('%f minutes have passed. Shutting down...', RUNTIME/60.0)

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
