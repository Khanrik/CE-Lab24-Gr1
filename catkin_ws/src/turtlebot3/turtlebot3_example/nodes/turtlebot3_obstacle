#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import time
from readFromRGB import *

LINEAR_VEL = 0.21 #MAX = 0.21, MAX ANG.Z=2.6
LINEAR_PERCENT = LINEAR_VEL/100
ANGULAR_VEL = 2.6
ANGULAR_PERCENT = ANGULAR_VEL/100
STOP_DISTANCE = 0.10
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
FULL_SEND_DISTANCE = SAFE_STOP_DISTANCE * 3

LEFT = 1
RIGHT = -1

class Obstacle():
    def __init__(self):
        self.speed_updates = 0
        self.speed_accumulation = 0
        self.collision_counter = 0
        self.vicim_counter = 0
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    def turn(self, direction, distance, weight, back_up = False):
        angular_skew = (abs(distance * (1 - weight) - FULL_SEND_DISTANCE) / FULL_SEND_DISTANCE) * 100
        linear_skew = 100 - angular_skew

        rospy.loginfo('Distribution is angular = %f, linaer = %f', angular_skew, linear_skew)
        
        # Direction changes parity of angular vel to turn left or right
        if not back_up:
            return linear_skew * LINEAR_PERCENT, direction * angular_skew * ANGULAR_PERCENT
        else:
            return -linear_skew * LINEAR_PERCENT, direction * angular_skew * ANGULAR_PERCENT
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
        
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 180          # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        start = time.time()
        limit = 120
        end = start + limit

        while not rospy.is_shutdown() and time.time() < end:
            lidar_distances = self.get_scan()
            np.mean(lidar_distances)
            angles = []
            distances = []
            for i in range(6):
                theta = i * 30
                angles.append(theta)
                theta = 180 - theta
                distances.append(np.mean(lidar_distances[theta-30:theta]))
            
            big_turn = 0.2
            norm_turn = 0.0
            smol_turn = -0.2

            if min(distances) <= STOP_DISTANCE:
                twist.linear.x = -LINEAR_VEL
                twist.angular.z = 0.0
                self.collision_counter += 1
                rospy.loginfo('Collision detected')

            elif min(distances[2:4]) < FULL_SEND_DISTANCE or min(distances[1], distances[4]) < SAFE_STOP_DISTANCE:
                if sum(distances) <= 6 * SAFE_STOP_DISTANCE: # Uturn if it is surrounded
                    twist.linear.x, twist.angular.z = 0.0, ANGULAR_VEL
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Uturning!')

                elif distances[2] < SAFE_STOP_DISTANCE: # 60 deg-90 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[2], big_turn, back_up = True)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Backup left! (ang = %f, distance = %f)', angles[2], distances[2])
                
                elif distances[3] < SAFE_STOP_DISTANCE: # 90 deg-120 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[3], big_turn, back_up = True)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Backup right! (ang = %f, distance = %f)', angles[3], distances[3])
                
                elif distances[2] < SAFE_STOP_DISTANCE * 1.5: # 60 deg-90 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[2], big_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Big turn right! (ang = %f, distance = %f)', angles[2], distances[2])
                
                elif distances[3] < SAFE_STOP_DISTANCE * 1.5: # 90 deg-120 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[3], big_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Big turn left! (ang = %f, distance = %f)', angles[3], distances[3])

                elif distances[2] < SAFE_STOP_DISTANCE * 2: # 60 deg-90 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[2], norm_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turn right! (ang = %f, distance = %f)', angles[2], distances[2])
                
                elif distances[3] < SAFE_STOP_DISTANCE * 2: # 120 deg-150 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[3], norm_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turn left! (ang = %f, distance = %f)', angles[3], distances[3])
                
                elif distances[2] < SAFE_STOP_DISTANCE * 3: # 60 deg-90 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[2], smol_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Slight right! (ang = %f, distance = %f)', angles[2], distances[2])
                
                elif distances[3] < SAFE_STOP_DISTANCE * 3: # 150 deg-180 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[3], smol_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Slight left! (ang = %f, distance = %f)', angles[3], distances[3])

                elif distances[1] < SAFE_STOP_DISTANCE * 2: # 30 deg-60 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[1], norm_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turn right! (ang = %f, distance = %f)', angles[1], distances[1])
                
                elif distances[4] < SAFE_STOP_DISTANCE * 2: # 120 deg-150 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[4], norm_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turn left! (ang = %f, distance = %f)', angles[4], distances[4])
                
                elif distances[0] < SAFE_STOP_DISTANCE * 3: # 0 deg-30 deg
                    twist.linear.x, twist.angular.z = self.turn(RIGHT, distances[0], smol_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Slight right! (ang = %f, distance = %f)', angles[0], distances[0])
                
                elif distances[5] < SAFE_STOP_DISTANCE * 3: # 150 deg-180 deg
                    twist.linear.x, twist.angular.z = self.turn(LEFT, distances[5], smol_turn)
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Slight left! (ang = %f, distance = %f)', angles[5], distances[5])
            else:
                twist.linear.x, twist.angular.z = LINEAR_VEL, 0.0
                self._cmd_pub.publish(twist)
                rospy.loginfo('GO!')
            
            if detectVictim():
                blinkLED()
                twist.linear.x, twist.angular.z = 0.0, 0.0
                self._cmd_pub.publish(twist)
                self.vicim_counter += 1
                rospy.loginfo('Victim detected!')
            
            self.speed_accumulation += twist.linear.x
            self.speed_updates += 1
            rospy.sleep(0.1)
        
        twist.linear.x, twist.angular.z = 0, 0
        self._cmd_pub.publish(twist)
        avg_speed = self.speed_accumulation / self.speed_updates
        rospy.loginfo('Average speed = %f, collision counter = %d', avg_speed, self.collision_counter)
        rospy.loginfo('%f minutes have passed. Shutting down...', limit/60)


def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
